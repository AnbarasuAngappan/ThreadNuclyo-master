//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThreadNuclyo.ReadingServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReadingServiceReference.IUberService")]
    public interface IUberService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/GetHouseDetails", ReplyAction="http://tempuri.org/IUberService/GetHouseDetailsResponse")]
        System.Data.DataTable GetHouseDetails(string _houseID, string _apiKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/GetHouseDetails", ReplyAction="http://tempuri.org/IUberService/GetHouseDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetHouseDetailsAsync(string _houseID, string _apiKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/GetModbusDetails", ReplyAction="http://tempuri.org/IUberService/GetModbusDetailsResponse")]
        System.Data.DataTable GetModbusDetails(string _houseID, string _apiKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/GetModbusDetails", ReplyAction="http://tempuri.org/IUberService/GetModbusDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetModbusDetailsAsync(string _houseID, string _apiKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteDLMXDetails", ReplyAction="http://tempuri.org/IUberService/WriteDLMXDetailsResponse")]
        void WriteDLMXDetails(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteDLMXDetails", ReplyAction="http://tempuri.org/IUberService/WriteDLMXDetailsResponse")]
        System.Threading.Tasks.Task WriteDLMXDetailsAsync(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteErrorLog", ReplyAction="http://tempuri.org/IUberService/WriteErrorLogResponse")]
        void WriteErrorLog(string _societyID, string _houseID, string _meterID, string _ipAddress, string _port, string _status, string _errorCode, string _errorMsg, System.DateTime _dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteErrorLog", ReplyAction="http://tempuri.org/IUberService/WriteErrorLogResponse")]
        System.Threading.Tasks.Task WriteErrorLogAsync(string _societyID, string _houseID, string _meterID, string _ipAddress, string _port, string _status, string _errorCode, string _errorMsg, System.DateTime _dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteSuccessLog", ReplyAction="http://tempuri.org/IUberService/WriteSuccessLogResponse")]
        void WriteSuccessLog(string LogFilePath, string text, string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteSuccessLog", ReplyAction="http://tempuri.org/IUberService/WriteSuccessLogResponse")]
        System.Threading.Tasks.Task WriteSuccessLogAsync(string LogFilePath, string text, string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteExceptionLog", ReplyAction="http://tempuri.org/IUberService/WriteExceptionLogResponse")]
        void WriteExceptionLog(string LogFilePath, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteExceptionLog", ReplyAction="http://tempuri.org/IUberService/WriteExceptionLogResponse")]
        System.Threading.Tasks.Task WriteExceptionLogAsync(string LogFilePath, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/GetLatestMeterreading", ReplyAction="http://tempuri.org/IUberService/GetLatestMeterreadingResponse")]
        System.Data.DataTable GetLatestMeterreading(string _societyID, string _ipAddress, int _Iid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/GetLatestMeterreading", ReplyAction="http://tempuri.org/IUberService/GetLatestMeterreadingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLatestMeterreadingAsync(string _societyID, string _ipAddress, int _Iid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteSolarDetails", ReplyAction="http://tempuri.org/IUberService/WriteSolarDetailsResponse")]
        void WriteSolarDetails(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUberService/WriteSolarDetails", ReplyAction="http://tempuri.org/IUberService/WriteSolarDetailsResponse")]
        System.Threading.Tasks.Task WriteSolarDetailsAsync(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUberServiceChannel : ThreadNuclyo.ReadingServiceReference.IUberService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UberServiceClient : System.ServiceModel.ClientBase<ThreadNuclyo.ReadingServiceReference.IUberService>, ThreadNuclyo.ReadingServiceReference.IUberService {
        
        public UberServiceClient() {
        }
        
        public UberServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UberServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UberServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UberServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetHouseDetails(string _houseID, string _apiKey) {
            return base.Channel.GetHouseDetails(_houseID, _apiKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetHouseDetailsAsync(string _houseID, string _apiKey) {
            return base.Channel.GetHouseDetailsAsync(_houseID, _apiKey);
        }
        
        public System.Data.DataTable GetModbusDetails(string _houseID, string _apiKey) {
            return base.Channel.GetModbusDetails(_houseID, _apiKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetModbusDetailsAsync(string _houseID, string _apiKey) {
            return base.Channel.GetModbusDetailsAsync(_houseID, _apiKey);
        }
        
        public void WriteDLMXDetails(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport) {
            base.Channel.WriteDLMXDetails(_societyIS, _houseID, _meterID, _ipAddress, _port, _serialNo, _reading, _importExport);
        }
        
        public System.Threading.Tasks.Task WriteDLMXDetailsAsync(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport) {
            return base.Channel.WriteDLMXDetailsAsync(_societyIS, _houseID, _meterID, _ipAddress, _port, _serialNo, _reading, _importExport);
        }
        
        public void WriteErrorLog(string _societyID, string _houseID, string _meterID, string _ipAddress, string _port, string _status, string _errorCode, string _errorMsg, System.DateTime _dateTime) {
            base.Channel.WriteErrorLog(_societyID, _houseID, _meterID, _ipAddress, _port, _status, _errorCode, _errorMsg, _dateTime);
        }
        
        public System.Threading.Tasks.Task WriteErrorLogAsync(string _societyID, string _houseID, string _meterID, string _ipAddress, string _port, string _status, string _errorCode, string _errorMsg, System.DateTime _dateTime) {
            return base.Channel.WriteErrorLogAsync(_societyID, _houseID, _meterID, _ipAddress, _port, _status, _errorCode, _errorMsg, _dateTime);
        }
        
        public void WriteSuccessLog(string LogFilePath, string text, string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport) {
            base.Channel.WriteSuccessLog(LogFilePath, text, _societyIS, _houseID, _meterID, _ipAddress, _port, _serialNo, _reading, _importExport);
        }
        
        public System.Threading.Tasks.Task WriteSuccessLogAsync(string LogFilePath, string text, string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport) {
            return base.Channel.WriteSuccessLogAsync(LogFilePath, text, _societyIS, _houseID, _meterID, _ipAddress, _port, _serialNo, _reading, _importExport);
        }
        
        public void WriteExceptionLog(string LogFilePath, string text) {
            base.Channel.WriteExceptionLog(LogFilePath, text);
        }
        
        public System.Threading.Tasks.Task WriteExceptionLogAsync(string LogFilePath, string text) {
            return base.Channel.WriteExceptionLogAsync(LogFilePath, text);
        }
        
        public System.Data.DataTable GetLatestMeterreading(string _societyID, string _ipAddress, int _Iid) {
            return base.Channel.GetLatestMeterreading(_societyID, _ipAddress, _Iid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLatestMeterreadingAsync(string _societyID, string _ipAddress, int _Iid) {
            return base.Channel.GetLatestMeterreadingAsync(_societyID, _ipAddress, _Iid);
        }
        
        public void WriteSolarDetails(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport) {
            base.Channel.WriteSolarDetails(_societyIS, _houseID, _meterID, _ipAddress, _port, _serialNo, _reading, _importExport);
        }
        
        public System.Threading.Tasks.Task WriteSolarDetailsAsync(string _societyIS, string _houseID, string _meterID, string _ipAddress, string _port, string _serialNo, string _reading, int _importExport) {
            return base.Channel.WriteSolarDetailsAsync(_societyIS, _houseID, _meterID, _ipAddress, _port, _serialNo, _reading, _importExport);
        }
    }
}
